#!/usr/bin/env zsh

# List files
lf() {
    if [ -z "${1}" ]; then
	echo 'Usage:'
	echo 'lf <PATTERN>'
	echo 'lf <PATH> <PATTERN>'
	return
    fi

    if [ -z "${2}" ]; then
	find . -name $1 -type f
    else
	find $1 -name $2 -type f
    fi
}

# Sample file
samplef() {
    # set -x
    if [ -z "${1}" ]; then
	echo 'Error: Missing file path'
	echo
	echo 'Usage:'
	echo 'samplef <FILEPATH> <SAMPLE_SIZE>'
	echo
	echo 'Optional paramters: <SAMPLE_SIZE>, default is 0.1'
	echo 'ex; samplef ./myfile.txt 0.25'
	return
    fi
    SAMPLE_RATIO=${2:-0.1}
    cat $1 | perl -n -e "print if (rand() < $SAMPLE_RATIO)"
}

# Date helper
utc() {
    date -u
}

isodate() {
    date -u +"%Y-%m-%dT%H:%M:%SZ"
}

lexicaldate() {
    date -u +"%Y%m%d%H%M%S"
}

lexicaldate-min() {
    date -u +"%Y%m%d%H%M"
}

ctags-emacs() {
    ctags -e -R .
    print Done indexing $(pwd)
}

ctags-python() {
    PYTHON_VENV=${$(which python)/\/bin\/python/}
    ctags -e -R . $PYTHON_VENV
}

# Reload the shell
reload() {
    if [[ -f ~/.zshrc ]] ; then
	source ~/.zshrc
	echo "zsh reloaded."
    fi
}

# Java
function setjdk() {
  if [ $# -ne 0 ]; then
   removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'
   if [ -n "${JAVA_HOME+x}" ]; then
    removeFromPath $JAVA_HOME
   fi
   export JAVA_HOME=`/usr/libexec/java_home -v $@`
   export PATH=$JAVA_HOME/bin:$PATH
  fi
}
function removeFromPath() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
}
#setjdk 1.8

function jpid() {
    if [ -z "$1" ]; then
	print Missing java process name
	return 1
    fi
    jps | grep $1 | cut -d' ' -f1
}

# General Path Helper
function pathAdd() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
	export PATH="${PATH:+"$PATH:"}$1"
    fi
}

# Python virtualenv
export WORKON_HOME=~/.envs
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true
#source $(which virtualenvwrapper.sh)

# Go dev
alias goplay='cd /go/src/github.com/cevaris'
export GOPATH=/go
export GOBIN=$GOPATH/bin
export PATH=$GOBIN/bin:$PATH

function docker-ip() {
    boot2docker ip 2> /dev/null
}

function docker-ssh() {
    docker-setup
    boot2docker ssh '[ -f /var/lib/boot2docker/nsenter ] || docker run --rm -v /var/lib/boot2docker/:/target jpetazzo/nsenter'
    args=$@
    boot2docker ssh -t sudo /var/lib/boot2docker/docker-enter "${args[@]}"
}

function docker-setup() {
    boot2docker up
    export DOCKER_HOST=tcp://$(docker-ip):2376
    export DOCKER_CERT_PATH=/Users/$USER/.boot2docker/certs/boot2docker-vm
    export DOCKER_TLS_VERIFY=1
}

# Python
export PYTHONDONTWRITEBYTECODE=1

# Ruby
function rvm_init() {

    RVM_VERSION=$(echo $MY_RUBY_HOME | awk -F'-' '{print $2}')
    RVM_GEMSET=$(basename $(PWD))

    for i in "$@"
    do
	case $i in
	    -g=*|--gemset=*)
		RVM_GEMSET="${i#*=}"
		;;
	    -r=*|--ruby=*)
		RVM_VERSION="${i#*=}"
		;;
	    *) # unknown option
		;;
	esac
    done

    print Gemset: $RVM_GEMSET
    print Version: $RVM_VERSION

    if ! type rvm > /dev/null 2>&1; then
	print RVM is not installed
	return 1
    fi
    rvm --create --ruby-version $RVM_VERSION@$RVM_GEMSET
}

func git-tag() {
    if [ -z "$1" ]; then
	print Missing tag prefix
	return 1
    fi
    _DATE=$(lexicaldate-min)
    _TAG_NAME="$1-$_DATE"
    echo $_TAG_NAME | pbcopy
    echo "creating tag $_TAG_NAME"
    git tag -a $_TAG_NAME -m "$1"
    echo "pushing tag $_TAG_NAME"
    git push origin $_TAG_NAME
}

# Scala
func scala-init() {
    if [ -z "$1" ]; then
	print Missing project name
	return 1
    fi
    SCALA_PROJ_NAME=$1
    git clone git://github.com/cevaris/skeleton $SCALA_PROJ_NAME
    cd $SCALA_PROJ_NAME
    rm -rf .git
    sed -i '' "s/bonjour/$SCALA_PROJ_NAME/" ./build.sbt
    sbt
}

# Kill by port
func kill-port() {
    _PID_TO_KILL=$(lsof -i :$1 | tail -n 1 | awk '{print $2}')
    echo "Killing port $_PID_TO_KILL"
    kill -9 $_PID_TO_KILL
}

# gitignore
func gitignore() {
    curl https://raw.githubusercontent.com/github/gitignore/master/$1.gitignore
}

# JVX
function jvx() { jvis $1:36001 ;}

function ffmpeg-scale() {
    if hash ffmpeg 2>/dev/null; then
	_FS_SOURCE=$1
	_FS_PREFIX=$2
	_FS_SCALE=$3

	if [ -z "$1" ]; then
	    echo 'Missing image source.'
	    return 1
	fi
	if [ -z "$2" ]; then
	    echo 'Missing image prefix.'
	    return 1
	fi
	if [ -z "$1" ]; then
	    echo 'Missing scale size (pixles).'
	    return 1
	fi

	ffmpeg -i $_FS_SOURCE -vf scale=$_FS_SCALE:$_FS_SCALE $_FS_PREFIX-$_FS_SCALE.png
    else
	echo 'ffmpeg not installed.'
	return 1
    fi
}

function removeKnownHost() {
    TO_BE_REMOVED=$1
    if [ -z "$1" ]; then
	echo 'Missing hostname.'
	return 1
    fi

    LINE_NUMBER=$(ssh-keygen -F "${TO_BE_REMOVED}" | head -n 1 |  grep -oP '(\d+)')
    if [ -z "$LINE_NUMBER" ]; then
	echo 'Hostname not found in known hosts.'
	return 1
    fi

    sed -i .bk "${LINE_NUMBER}d" ~/.ssh/known_hosts
}

alias yaml2json="ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))'"
function yq() {
    cat - | yaml2json | jq $1
}

function rword(){
    WORDFILE=/usr/share/dict/words
    # using cat means wc outputs only a number, not number followed by filename
    lines=$(cat $WORDFILE  | wc -l);
    rnum=$((RANDOM*RANDOM%$lines+1));
    sed -n "$rnum p" $WORDFILE
}

cdw() { cd ~/workspace/${@}; }
compctl -/ -W ~/workspace cdw
